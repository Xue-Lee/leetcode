class Solution {
    
   static int[] max = new int[2];
	static int left = 0;
	static int right = 0;
	static char[] arr;

	public String longestPalindrome(String s) {
		if (s == null || s.length() == 1)
			return s;

		arr = s.toCharArray();

		for (int i = 0; i < arr.length - 1; i++) {
			if (!good(i))
				continue;
			while (left >= 0 && right <= arr.length - 1) {
				if (arr[left] != arr[right]) {
					break;
				} else {
					if ((right - left) > (max[1] - max[0])) {
						max[0] = left ;
						max[1] = right ;
					}
					left--;
					right++;
				}

			}
		}
        if(max[1] - max[0] == 0)
            return null;
		return s.substring(max[0], max[1] + 1);
	}

	private static boolean good(int i) {
		if (i < arr.length - 1 && arr[i] == arr[i + 1]) {
			left = i;
			right = i + 1;
			return true;
		} else if (i < arr.length - 2 && arr[i] == arr[i + 2]) {
			left = i;
			right = i + 2;
			return true;
		}
		return false;
	}
}